p[i]=as.numeric(readline("Ente probability values:"))
if(p[i]<1&&p[i]>=0){
s=sum(p)
cp=cumsum(p)
}else{
break
}
for(i in 1:n){
p[i]=as.numeric(readline("Ente probability values:"))
if(p[i]<1&&p[i]>=0){
s=sum(p)
cp=cumsum(p)
}else{
break
}
}
if(s!=1){
cat("Re enter the probability values :")
i=0
}
cat("The IAT values are:",t,"/n")
cat("The probability values are:",p,"/n")
cat("The cf values:",cp,"/n")
rd=round(runif(n),1)
source('D:/Time series/server1.R')
source('D:/Time series/server1.R')
source('D:/Time series/server1.R')
source('D:/Time series/pg.R')
2
23
asfa
exit
source('D:/Time series/server1.R')
source('D:/Time series/server1.R')
source('D:/Time series/server1.R')
source('~/.active-rstudio-document')
p
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
iatc
source('D:/Time series/server1.R')
source('D:/Time series/server1.R')
rd=round(runif(n),1)
rd=round(runif(n1),1)
source('D:/Time series/server1.R')
source('D:/Time series/server1.R')
source('D:/Time series/server1.R')
source('D:/Time series/server1.R')
source('D:/Time series/server1.R')
iatc
source('D:/Time series/server1.R')
source('D:/Time series/server1.R')
df
View(df)
source('D:/Time series/server1.R')
View(df)
source('D:/Time series/server1.R')
source('D:/Time series/server1.R')
View(df)
source('D:/Time series/server1.R')
iatc
source('D:/Time series/server1.R')
iatc
source('D:/Time series/server1.R')
iatc
source('D:/Time series/server1.R')
View(df2)
source('D:/Time series/server1.R')
iat
t
p
source('D:/Time series/server1.R')
source('D:/Time series/server1.R')
source('D:/Time series/server1.R')
source('D:/Time series/server1.R')
View(df)
source('D:/3 SEM/Time series/mixed cong.R')
source('D:/3 SEM/Time series/Exponential.R')
source('D:/3 SEM/Time series/Exponential.R')
data.frame(year,y)
source('D:/3 SEM/Time series/Exponential.R')
source('D:/3 SEM/Time series/Exponential.R')
source('D:/3 SEM/Time series/Exponential.R')
source('D:/3 SEM/Time series/Exponential.R')
t
source('D:/3 SEM/Time series/Exponential.R')
source('D:/3 SEM/Time series/Exponential.R')
t1=0;a1=0;newf=0;
t1[1]=0;
a1[1]=y[1]
newf[1]=a1[1]+t1[1]
for (i in 2:n){
a1[i]=alp*y[i]+(1-alp)*(a1[i-1]+t1[i-1])
t1[i]=beta*(a1[i]-a1[i-1])+(1-beta)*t1[i-1]
newf[i]=a1[i]+t1[i]
}
newf
t1
a1
source('D:/3 SEM/Time series/Exponential.R')
a1
newf
t1=0;a1=0;newf=0;
t1[1]=0;
a1[1]=y[1]
newf[1]=a1[1]+t1[1]
for (i in 2:n){
t1[i]=beta*(a1[i]-a1[i-1])+(1-beta)*t1[i-1]
newf[i]=a1[i]+t1[i]
}
a1
newf
source('D:/3 SEM/Time series/Exponential.R')
source('D:/3 SEM/Time series/Exponential.R')
a1
t1=0;a1=0;newf=0;
t1[1]=0;
a1[1]=y[1]
newf[1]=a1[1]+t1[1]
for (i in 2:n){
a1[i]=alp*y[i]+(1-alp)*(a1[i-1]+t1[i-1])
t1[i]=beta*(a1[i]-a1[i-1])+(1-beta)*t1[i-1]
newf[i]=a1[i]+t1[i]
}
a1
newf
y
f
source('D:/3 SEM/Time series/Exponential.R')
a1
f
source('D:/3 SEM/Time series/Exponential.R')
a
a1
f
while (1) {
cat("1.User input\n2.Formula\n3.Exit\n")
ch=as.integer(readline("Enter the option:"))
if(ch==1){
alp=as.numeric(readline("Enter the  values for alpha :"))
while(alp<=0 || alp>=1){
cat("Alpha should be between 0 & 1 Re-enter the value\n ")
alp=as.numeric(readline("Enter the  value :"))
}
f=0;
f[1]=y[1]
for (j in 2:n) {
f[j]=alp*y[j-1]+(1-alp)*f[j-1]
}
t=data.frame(year,y,f)
print(t)
}else if(ch==2){
alp=2/(n+1)
f=0;
f[1]=y[1]
for (j in 2:n) {
f[j]=alp*y[j-1]+(1-alp)*f[j-1]
}
t=data.frame(year,y,f)
print(t)
}else{
break
}
}
cat("Trend Adiusted exponential method\n")
beta=as.numeric(readline("Enter the  values for beta :"))
t1=0;a1=0;newf=0;
t1[1]=0;
a1[1]=y[1]
newf[1]=a1[1]+t1[1]
for (i in 2:n){
a1[i]=alp*y[i]+(1-alp)*(a1[i-1]+t1[i-1])
t1[i]=beta*(a1[i]-a1[i-1])+(1-beta)*t1[i-1]
newf[i]=a1[i]+t1[i]
}
a1
f1
f
newf
cat("1.Binomial\n2.Poisson\n3.exit\n")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
sum(pmf)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
lamda
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
n=as.integer(readline("enter the no of values:"))
while(lamda<=0){
cat("RE-enter the lamda  value:")
lamda=as.numeric(readline("Enter the lamda value:"))
x=0;pmf=0;
for (i in 1:(n+1)) {
x[i]=i-1
pmf[i]=(exp(-lamda)*(lamda^x[i]))/factorial(x[i])
}
cat("MEAN:",lamda,"\n")
cat("variance:",lamda,"\n")
cat("x   P(x)\n")
for(i in 1:(n+1)){
cat(x[i]," ",pmf[i]," \n")
}
}
x
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
year = 0;y = 0; f = 0;F = 0;t = 0;
n = as.integer(readline("Enter the number of values:"))
year = as.integer(readline("Enter the first year value:"))
year = seq(year,year + (n-1),1)
year
year = seq(year,year + (n-1),2)
year = as.integer(readline("Enter the first year value:"))
year = as.integer(readline("Enter the first year value:"))
year = seq(year,year + (n-1),2)
year
source('~/.active-rstudio-document')
f[1] = mean(y,na.rm = TRUE)
f
15/5
source('D:/3 SEM/Time series/pr3_mixed.R')
cbind(gx1,gx)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
data
ts.plot(data)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
acf(data)
source('~/.active-rstudio-document', echo=TRUE)
diff(data,2)
plogis(diff(data,2))
plot(diff)
plot(diff(data,2))
ts.plot(diff(data,2))
ts.plot(diff(data,2))
plot(diff(data,2))
ts.plot(diff(data,2))
pacf(data)
source('~/.active-rstudio-document', echo=TRUE)
ts.polt(diff(data,1))
ts.plot(diff(data,1))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("ffpp2")
install.packages("fpp2")
library(fpp2)
HoltWinters(data,alpha = 0.2,beta = FALSE,gamma = FALSE)
model=HoltWinters(data,alpha = 0.2,beta = FALSE,gamma = FALSE)
model1=HoltWinters(data,alpha = 0.2,beta = FALSE,gamma = FALSE,seasonal = "multiplicative")
print(model1$fitted)
plot(model1)
install.packages("forecast")
library(forecast)
for1=forecast(model,h=12)
print(for1)
plot(for1)
source('D:/3 SEM/Time series/Prg15.R', echo=TRUE)
source('D:/3 SEM/Time series/Prg15.R', echo=TRUE)
source('D:/3 SEM/Time series/Prg15.R', echo=TRUE)
new=subset(na.omit(airquality), select = c("Ozone", "Solar.R", "Wind", "Temp"))
library(caTools)
sp=sample.split(new$Ozone,SplitRatio = .8)
train=subset(new,sp==TRUE)
test=subset(new,sp==FALSE)
source('~/.active-rstudio-document', echo=TRUE)
model
#Prg 14
d=data.frame(AirPassengers)
d
shiny::runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
shinythemes::shinytheme()
shinytheme()
runApp('D:/shiny works/prediction')
shiny::runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
install.packages("shinyWidgets")
library(shinyWidgets)
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
install.packages("shinyalert")
library(shinyalert)
library(shinyalert)
runApp('D:/shiny works/prediction')
runApp()
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp()
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
shiny::runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
Sys.Date()
Sys.Date(1)
Sys.Date([1])
Sys.Date(year)
c<-as.Date(Sys.Date(),'%y/%m/%d')
c
format(c,'%y')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp()
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
runApp('D:/shiny works/prediction')
shiny::runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
shiny::runApp('D:/shiny works/for testing')
runApp()
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
install.packages("shinyjs")
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
d<-as.integer(format(Sys.Date(),"%Y"))
d
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
getwd()
runApp('D:/shiny works/for testing')
runApp()
runApp('D:/shiny works/for testing')
a=c("tv"=2,"ms"=5)
a
aa<-data.frame(a)
aa
b<-9
t<-cbind(aa,b)
t
t<-rbind(aa,b)
t
a=c("tv"=2,"ms"=5)
b<-9
aa<-data.frame(a)
aa
a<-b
a<-5
b<-5
ab<-data.frame(a,b)
ab
c<-9
ab<-c
ab
a<-5
b<-5
ab<-data.frame(a,b)
ab
c=10
ab$c<-c
ab
shiny::runApp('D:/shiny works/for testing')
runApp()
runApp('D:/shiny works/for testing')
library(xlsx)
install.packages("xlsx")
library(xlsx)
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
ab
bc<ab
bc=ab
bc
cd<-rbind(ab,bc)
cd
a
ab
bc
cd
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
install.packages("gtools")
library(gtools)
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
shiny::runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
log(15000)
sqrt(15000)
sqrt(2018)
log(2018)
log10(2018)
log(2018)
1/log(2018)
runApp('D:/shiny works/for testing')
3698^2
3698*10
3698*100
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
shell()
shiny::runApp('D:/shiny works/for testing')
runApp('D:/shiny works/for testing')
source('C:/Users/Abhi/Desktop/domain/ui.R')
install.packages("shinyalert")
runApp('C:/Users/Abhi/Desktop/domain')
runApp('C:/Users/Abhi/Desktop/domain')
runApp('D:/shiny works/prediction')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
shiny::runApp('C:/Users/Abhi/Desktop/domain')
runApp('C:/Users/Abhi/Desktop/domain')
runApp('C:/Users/Abhi/Desktop/domain')
install.packages("flexdashboard")
shiny::runApp('C:/Users/Abhi/Desktop/domain/Domain')
library(readxl)
model1 <- read_excel("C:/Users/Abhi/CRS/model1.xlsx")
View(model1)
data=model1
data
boxplot(data$UG_mark)
boxplot(data$IQ_mark)
hist(data$UG_mark)
hist(data$IQ_mark)
boxplot(data)
source('~/.active-rstudio-document')
head(data)
shiny::runApp()
